#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from typing import Generic, TypeVar
from matplotlib import pyplot as plt
from ...core import *

_M1 = TypeVar("_M1", bound=Measure)
_M2 = TypeVar("_M2", bound=Measure)

# Masses
MM = DataPoint(24.31, 0.01)
M0 = DataPoint(18.84, 0.01) + MM/3

@dataclass(slots=True, frozen=True)
class Spring(Generic[_M1, _M2]):
    Ms: _M1
    Ts: _M2


s = Spring(
    Ms=DataSet((
        M0 + DataPoint(407.73, 0.01),
        M0 + DataPoint(542.47, 0.01),
        M0 + DataPoint(667.82, 0.01),
        M0 + DataPoint(950.22, 0.01),
        # DataPoint(1085.56, 0.01),
        # DataPoint(1085.56, 0.01),
        # DataPoint(1220.28, 0.01),
    )),
    Ts=DataSet((
        DataSet(data_points([
            8.987_989, 8.988_225, 8.989_951, 8.989_224, 8.989_305,
            8.986_277, 8.990_786, 8.989_182, 8.989_389, 8.990_042,
            8.989_143, 8.986_911, 8.993_408, 8.988_227, 8.989_452,
            8.990_209, 8.988_518, 8.986_511, 8.988_505, 8.987_479,
            8.987_642, 8.989_055, 8.991_473, 8.988_318, 8.991_294,
        ], 0.000_001)),
        DataSet(data_points([
            10.272_667, 10.273_851, 10.274_213, 10.274_464, 10.273_843,
            10.274_965, 10.273_725, 10.275_370, 10.272_633, 10.274_499,
            10.274_427, 10.278_365, 10.276_887, 10.273_265, 10.274_735,
            10.274_424, 10.276_774, 10.274_876, 10.273_988, 10.275_616,
            10.277_288, 10.274_816, 10.272_956, 10.274_663, 10.275_234,
        ], 0.000_001)),
        DataSet(data_points([
            11.416_907, 11.419_384, 11.419_335, 11.418_863, 11.425_668,
            11.422_093, 11.423_052, 11.420_116, 11.422_162, 11.420_390,
            11.423_303, 11.419_471, 11.421_267, 11.421_079, 11.420_924,
            11.421_645, 11.423_221, 11.423_075, 11.423_016, 11.420_071,
            11.422_539, 11.420_351, 11.422_409, 11.423_354, 11.420_593,
            11.419_055, 11.420_612, 11.420_850, 11.421_337, 11.419_636,
            # 11.420_629,
        ], 0.000_001)),
        DataSet(data_points([
            13.416_812, 13.418_654, 13.419_096, 13.417_916, 13.419_507,
            13.418_026, 13.418_623, 13.423_273, 13.423_462, 13.421_026,
            13.421_232, 13.418_973, 13.420_023, 13.418_315, 13.420_612,
            13.421_027, 13.420_501, 13.417_054, 13.422_434, 13.417_538,
            13.419_461, 13.420_277, 13.421_762, 13.418_542, 13.419_249,
            13.419_017, 13.419_548, 13.418_079, 13.419_302, 13.416_307,
        ], 0.000_001)),
        # DataSet(data_points([
        #     14.311_381, 14.310_335, 14.316_397, 14.310_612, 14.310_951,
        #     14.311_313, 14.310_335, 14.311_249, 14.310_933, 14.311_243,
        #     14.313_426, 14.313_858, 14.311_980, 14.311_940, 14.312_760,
        #     14.312_551, 14.313_116, 14.311_970, 14.316_335, 14.313_692,
        #     14.315_488, 14.311_734, 14.313_830, 14.312_901, 14.311_869,
        #     # ----
        #     14.301_708, 14.302_173, 14.304_290, 14.304_782, 14.302_205,
        #     14.302_005, 14.307_075, 14.304_369, 14.310_311, 14.301_111,
        # ], 0.000_001)),
    )),
)

dist = NormalDistribution.from_dataset(s.Ts[0], n=7)
# dist.histogram()

Y = s.Ts.map(lambda t: (t/20)**2)   # convert 20T -> T^2
X = s.Ms.map(lambda m: m/1000)      # convert g -> kg

a, b = linear_regression_plot(X, Y)

print(b)
print((4 * π**2) / b)

# $a = -\omega^2 \Delta x$
# $- m \omega^2 = k$
# $\frac{4\pi^2}{k} m = T^2$
# $\frac{4\pi^2}{k} = b$

plt.show()  # type: ignore
#